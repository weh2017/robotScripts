# -*- coding: utf-8 -*-
KEYWORDS = {'openApplication': {'arg': ['path'], 'doc': 'Open application\n To open app with parameters, refer:\n https://sikulix-2014.readthedocs.io/en/latest/appclass.html#App.App'}, 'closeApplication': {'arg': ['name'], 'doc': 'Close application'}, 'imageCount': {'arg': ['steps', 'image='], 'doc': 'Image Count\n Count how many times the same picture is detected in screen.\n\n Examples:\n | ${image_cnt}=  |  Image Count  | test.png  |'}, 'changeScreenId': {'arg': ['screenId'], 'doc': 'Change screen id\n For multi display, user could use this keyword to switch to the correct screen\n\n Examples:\n | Change screen id | 1 |'}, 'captureRegion': {'arg': ['cooridnates'], 'doc': 'Capture region\n\n\nCapture region passed\nExamples:\n| ${screenshotname}= | Capture region | [x, y, w, h] |'}, 'selectRegion': {'arg': ['message'], 'doc': 'Select Region\n\n Allow user to select a region and capture it.\n Return array of [capturedImagePath, x, y, w, h]\n\n Examples:\n | @{SelectedRegion}= | Select region |'}, 'clickIn': {'arg': ['areaImage', 'targetImage'], 'doc': 'Click in. \nClick target image in area image.'}, 'setRoi': {'arg': ['cooridnates', 'timeout=0'], 'doc': 'Set ROI\n\n Set region of interest on screen\n Optionally pass highlight timeout.\n\n Examples:\n | Set ROI | [x, y, w, h] |\n | Set ROI | [x, y, w, h] | 2 |'}, 'highlightRoi': {'arg': ['timeout'], 'doc': 'Highlight ROI'}, 'mouseDown': {'arg': ['*mouseButtons'], 'doc': 'Mouse down\n Press and hold the specified buttons\n\n @mouseButtons: Could be LEFT, MIDDLE, RIGHT\n\n Examples:\n | Mouse Move   | test.png | \n | Mouse Down   | LEFT     | RIGHT |\n | Mouse Up     |'}, 'getExtendedRegionFrom': {'arg': ['image', 'direction', 'number_of_times_to_repeat'], 'doc': 'Get extended region from\n Extended the given image creating a region above or below with the same width\n The height can change using the multiplier @number_of_times_to_repeat, if 2 is given the new region will have twice the height of the orignalge '}, 'getNumberOfScreens': {'arg': [], 'doc': 'Get number of screens'}, 'addImagePath': {'arg': ['path'], 'doc': 'Add image path'}, 'wheelDown': {'arg': ['steps', 'image='], 'doc': 'Wheel down\n Move mouse to the target, and wheel down with give steps\n\n Examples:\n | Wheel Down     | 5   | \n | Wheel Down     | 5   |  test.png   |'}, 'getScreenCoordinates': {'arg': [], 'doc': 'Get screen coordinates\n\nReturn screen coordinates for active screen\n\nExamples:\n| @{coordinates}=  | Get Screen Coordinates | 0 |'}, 'getCurrentScreenId': {'arg': [], 'doc': 'Get current screen id'}, 'waitForImage': {'arg': ['wantedImage', 'notWantedImage', 'timeout'], 'doc': 'Wait For Image\n\n Check wantedImage exist. If notWantedImage appear or timeout happened, throw exception\n\n @wantedImage: expected image in screen\n\n @notWantedImage: unexpected image in screen\n\n @timeout: wait seconds\n\n Examples:\n | Wait For Image  | wanted.png | notWanted.png | 5 |'}, 'clearAllHighlights': {'arg': [], 'doc': 'Clear all highlights from screen'}, 'waitUntilScreenContain': {'arg': ['image', 'timeout'], 'doc': 'Wait until screen contain\n Wait until image shown in screen'}, 'getText': {'arg': ['image='], 'doc': 'Get text\n\n If image is not given, keyword will get text from whole Screen\n If image is given, keyword will get text from matched region\n Call keyword setOcrTextRead to set OcrTextRead as true, before using text recognition keywords\n\n Examples:\n | Set Ocr Text Read  | true       |\n | Get Text           |\n | Get Text           | test.png   |'}, 'inputText': {'arg': ['image', 'text'], 'doc': 'Input text\n Image could be empty\n\n Examples:\n | Input text | Sikuli |'}, 'doubleClickIn': {'arg': ['areaImage', 'targetImage'], 'doc': 'Double click in. \nDouble click target image in area image.'}, 'click': {'arg': ['image', 'xOffset=0', 'yOffset=0'], 'doc': 'Click\n\nClick on an image with similarity and offset.\nExamples:\n| Set Capture Matched Image | false |'}, 'captureScreen': {'arg': [], 'doc': 'Capture whole screen, file name is returned'}, 'doubleClick': {'arg': ['image', 'xOffset=0', 'yOffset=0'], 'doc': 'Double click'}, 'screenShouldContain': {'arg': ['image'], 'doc': 'Screen should contain'}, 'clearHighlight': {'arg': ['image'], 'doc': 'Clear highlight from screen'}, 'mouseUp': {'arg': ['*mouseButtons'], 'doc': 'Mouse up\n Release the specified mouse buttons\n\n @mouseButtons: Could be LEFT, MIDDLE, RIGHT. If empty, all currently held buttons are released\n\n Examples:\n | Mouse Move   | test.png | \n | Mouse Down   | LEFT     | RIGHT |\n | Mouse Up     | LEFT     | RIGHT |'}, 'readTextFromRegion': {'arg': ['reg'], 'doc': 'Read text from region'}, 'pasteText': {'arg': ['image', 'text'], 'doc': 'Paste text. Image could be empty'}, 'setCaptureFolder': {'arg': ['path'], 'doc': 'Set captured folder\n\nSet folder for captured images\nExamples:\n| Set captured folder | PATH |'}, 'clickNth': {'arg': ['image', 'index', 'similarity', 'sortByColumn=true'], 'doc': 'Click nth\n\n Click on specific image.\n Optionally pass similarity and sort by column or row.\n\n Examples:\n | Click on nth image in region | image.png | 1 | 0.9 |\n | Click on nth image in region | image.png | 1 | 0.9 | ${FALSE} |'}, 'waitForMultipleImages': {'arg': ['timeout', 'pollingInterval', 'expectedImages', 'notExpectedImages'], 'doc': 'Wait For Multiple Images\n\n Check if images exists in expectedImages or notExpectedImages list. If image appears that is listed in notExpectedImages list or timeout happened, throw exception If image appears that is listed in expectedImageslist return succesfully. \n\n @timeout: wait seconds\n\n @pollingInterval: time in seconds between screen checks\n\n @expectedImages: list of expected images in screen\n\n @notExpectedImages: list of not expected images in screen\n\n Examples:\n | @{wanted_images} =  | Create List | wanted_image1.png | wanted_image2.png |\n | @{not_wanted_images} =  | Create List | not_wanted_image1.png | not_wanted_image2.png | not_wanted_image3.png |\n | Wait For Multiple Images | 900 | 10 | ${wanted_images} | ${not_wanted_images} |'}, 'dragAndDrop': {'arg': ['srcImage', 'targetImage'], 'doc': 'Drag the source image to target image.\nIf source image is empty, drag the last match and drop at given target'}, 'highlight': {'arg': ['image', 'secs='], 'doc': 'Highlight matched image.\n If secs is set, highlight will vanish automatically after setted seconds'}, 'highlightRegion': {'arg': ['cooridnates', 'timeout'], 'doc': 'Highlight region'}, 'pressSpecialKey': {'arg': ['keyConstant'], 'doc': 'Press special key\n Presses a special keyboard key.\n\n For a list of possible Keys view docs for org.sikuli.script.Key .\n\n Examples:\n | Double Click | textFieldWithDefaultText.png | \n | Press Special Key | DELETE | '}, 'typeWithModifiers': {'arg': ['text', '*modifiers'], 'doc': 'Type with modifiers\n\n Examples:\n |Type With Modifiers| A | CTRL |'}, 'rightClickIn': {'arg': ['areaImage', 'targetImage'], 'doc': 'Right click in. \nRight click target image in area image.'}, 'resetRoi': {'arg': [], 'doc': 'Reset ROI\n Set Region of interest to full screen\n\n Examples:\n | Reset roi |'}, 'captureRoi': {'arg': [], 'doc': 'Capture Roi'}, 'clickRegion': {'arg': ['cooridnates', 'waitChange=0', 'timeout=0'], 'doc': 'Click region\n\n Click on defined region cooridinates.\n Optionally Wait for specified time to ensure region has changed.\n Also, optionally set highlight\n\n Examples:\n | Click on region | [x,y,w,h] | image.png |\n | Click on region | [x,y,w,h] | image.png | 0 |\n | Click on region | [x,y,w,h] | image.png | 0 | 2 |'}, 'mouseMove': {'arg': ['image='], 'doc': 'Mouse moveMove the mouse pointer to the target\n\n @image: if image is empty, will move mouse to the last matched.\n\n Examples:\n | Mouse Move              | test.png | \n | Screen Should Contain   | test.png | \n | Mouse Move |'}, 'wheelUp': {'arg': ['steps', 'image='], 'doc': 'Wheel up\n Move mouse to the target, and wheel up with give steps\n\n Examples:\n | Wheel Up     | 5   | \n | Wheel Up     | 5   |  test.png   |'}, 'waitUntilScreenNotContain': {'arg': ['image', 'timeout'], 'doc': 'Wait until screen not contain\n Wait until image not in screen'}, 'rightClick': {'arg': ['image'], 'doc': 'Right click'}, 'setTimeout': {'arg': ['timeout'], 'doc': 'Set timeout\n\nSet Sikuli timeout(seconds)\nExamples:\n| Set timeout | 10 |'}, 'dragAndDropByOffset': {'arg': ['srcImage', 'xOffset', 'yOffset'], 'doc': 'Drag the source image to target by offset.\nIf source image is empty, drag the last match and drop at given target'}, 'screenShouldNotContain': {'arg': ['image'], 'doc': 'Screen should not contain\n Screen should not contain image\n\n Examples:\n | Screen should not contain | image.png |'}, 'exists': {'arg': ['image', 'timeout='], 'doc': 'Exists\n\n Check whether image exists in screen\n @image: expected image in screen\n @timeout: wait seconds\n\n Examples:\n | ${is_exist}=  | Exists | image.png | 0 |'}, 'getImageCoordinates': {'arg': ['image', 'coordinates=[]'], 'doc': 'Get Image Coordinates\n\n Return image coordinates, within region\n Examples:\n | ${imageCoordinates}= | Get Image Coordinates | image.png=0.75 |\n | ${imageCoordinates}= | Get Image Coordinates | image.png=0.75 | [x, y, w, z] |'}, 'setCaptureMatchedImage': {'arg': ['value'], 'doc': 'Set capture matched image\n\nSet capture matched images, the default value is true\nExamples:\n| Set Capture Matched Image | false |'}, 'removeImagePath': {'arg': ['path'], 'doc': 'Remove image path'}, 'getMatchScore': {'arg': ['image'], 'doc': 'Get match scoreTries to find the image on the screen, returns accuracy score (0-1)\n\n Examples:\n | ${score} = | Get Match Score |  somethingThatMayExist.png |\n | Run Keyword if | ${score} > 0.95 | keyword1 | ELSE | keyword2 |'}, 'setShowActions': {'arg': ['showActions'], 'doc': 'Set show actions'}, 'setOcrTextRead': {'arg': ['ocrTextRead'], 'doc': 'OCR text read'}, 'setSlowMotionDelay': {'arg': ['delay'], 'doc': 'Set slow motion delay\n Control the duration of the visual effect (seconds).'}, 'setWaitScanRate': {'arg': ['delay'], 'doc': 'Set wait scan rate\n Specify the number of times actual search operations are performed per second while waiting for a pattern to appear or vanish.'}, 'setMoveMouseDelay': {'arg': ['delay'], 'doc': 'Set move mouse delay'}, 'setMinSimilarity': {'arg': ['minSimilarity'], 'doc': 'Set min similarity'}, 'stop_remote_server': {'arg': [], 'doc': 'Stops the remote server.\n\nThe server may be configured so that users cannot stop it.'}, 'start_sikuli_process': {'arg': ['port=None'], 'doc': '\n        This keyword is used to start sikuli java process.\n        If library is inited with mode "OLD", sikuli java process is started automatically.\n        If library is inited with mode "NEW", this keyword should be used.\n\n        :param port: port of sikuli java process, if value is None or 0, a random free port will be used\n        :return: None\n        '}}